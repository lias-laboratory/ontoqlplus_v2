/********************************************************************************* * This file is part of MariusQLPlus Project. * Copyright (C) 2014  LIAS - ENSMA *   Teleport 2 - 1 avenue Clement Ader *   BP 40109 - 86961 Futuroscope Chasseneuil Cedex - FRANCE *  * MariusQLPlus is free software: you can redistribute it and/or modify * it under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * MariusQLPlus is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU Lesser General Public License for more details. *  * You should have received a copy of the GNU Lesser General Public License * along with MariusQLPlus.  If not, see <http://www.gnu.org/licenses/>. **********************************************************************************/package fr.ensma.lias.mariusqlplus.config;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.sql.SQLException;import java.util.ArrayList;import java.util.Collections;import java.util.Enumeration;import java.util.List;import java.util.Properties;import java.util.Vector;import javax.swing.AbstractAction;import javax.swing.DefaultListModel;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPasswordField;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.SwingUtilities;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import fr.ensma.lias.mariusqlplus.common.util.GridBagUtil;import fr.ensma.lias.mariusqlplus.common.util.GuiUtils;import fr.ensma.lias.mariusqlplus.common.util.SwingWorker;import fr.ensma.lias.mariusqlplus.config.dataaccess.ConnectionConfigDao;import fr.ensma.lias.mariusqlplus.main.Main;/** * @author Mickael BARON */public class ConnectionConfigPanel extends JPanel implements ListSelectionListener {    private static final long serialVersionUID = 7465606041802229755L;    private ConnectionConfigDialog parent;    private GuiUtils gUtils = new GuiUtils(this);//    private final int COL_SIZE = 20;    private List<ConnectionConfig> configList;    public static final String POSTGRESQL = "POSTGRESQL";    public static final String HSQLDB = "HSQLDB";        public static final String ORACLE = "ORACLE";    private Object[] drivers = { "POSTGRESQL", "HSQLDB", "ORACLE" };    private final NewAction newAction = new NewAction();    private final DeleteAction deleteAction = new DeleteAction();    private final SaveAction saveAction = new SaveAction();    private final ConnectAction connectAction = new ConnectAction();    private JList savedConfigsList;    private DefaultListModel listModel;    private final JTextField nameText = new JTextField(20);    private final JTextField ipText = new JTextField(20);    private final JTextField sidText = new JTextField(20);    private final JTextField userText = new JTextField(20);    private final JTextField portText = new JTextField(20);    private final JPasswordField passText = new JPasswordField(20);    private final JComboBox driverList = new JComboBox(this.drivers);    private final JButton newButton = new JButton(this.newAction);    private final JButton deleteButton = new JButton(this.deleteAction);    private final JButton saveButton = new JButton(this.saveAction);    private final JButton connectButton = new JButton(this.connectAction);    public ConnectionConfigPanel(ConnectionConfigDialog parent) {	this.parent = parent;	this.configList = new ArrayList<ConnectionConfig>();	setLayout(new GridBagLayout());	GridBagUtil.add(this, createSavedConfigsPanel(), 0, 0, 0, 0, 1.0D,		1.0D, 1, 11, new Insets(12, 12, 6, 12));	GridBagUtil.add(this, createConfigPanel(), 0, 1, 0, 0, 0.0D, 0.0D, 2,		11, new Insets(0, 12, 12, 11));    }    public void waitCursor(boolean on) {	if (on) {	    this.parent.getGlassPane().setVisible(true);	} else {	    this.parent.getGlassPane().setVisible(false);	}    }    public String getSchema() {	return this.userText.getText().trim();    }    public void valueChanged(ListSelectionEvent lse) {	if (lse.getValueIsAdjusting()) {	    this.deleteButton.setEnabled(true);	    return;	}	JList list = (JList) lse.getSource();	if (!list.isSelectionEmpty()) {	    ConnectionConfig config = (ConnectionConfig) list.getSelectedValue();	    this.nameText.setText(config.getName());	    this.ipText.setText(config.getIp());	    this.portText.setText(Integer.toString(config.getPort()));	    this.sidText.setText(config.getSid());	    this.userText.setText(config.getUser());	    this.passText.setText(config.getPassword());	    this.driverList.setSelectedItem(config.getDriver());	}    }    private JPanel createSavedConfigsPanel() {	JPanel savedConfigsPanel = new JPanel();	savedConfigsPanel.setLayout(new GridBagLayout());	this.listModel = new SortedListModel();	this.configList = ConnectionConfigDao.loadSavedConfigs();	for (ConnectionConfig c : this.configList) {	    this.listModel.addElement(c);	}	this.savedConfigsList = new JList(this.listModel);	this.savedConfigsList.setSelectionMode(0);	this.savedConfigsList.addListSelectionListener(this);	if (!this.listModel.isEmpty()) {	    this.savedConfigsList.setSelectedIndex(0);	}	JScrollPane scrollPane = new JScrollPane(this.savedConfigsList);	scrollPane.setVerticalScrollBarPolicy(22);	GridBagUtil.add(savedConfigsPanel, scrollPane, 0, 0, 0, 0, 1.0D, 1.0D,		1, 10, new Insets(0, 0, 0, 5));	JPanel buttonPanel = new JPanel();	buttonPanel.setLayout(new GridBagLayout());	GridBagUtil.add(buttonPanel, this.newButton, 0, 0, 0, 0, 0.0D, 0.0D, 2,		11, new Insets(0, 0, 0, 0));	GridBagUtil.add(buttonPanel, this.deleteButton, 0, 1, 0, 0, 0.0D, 0.0D,		2, 11, new Insets(0, 0, 0, 0));	GridBagUtil.add(savedConfigsPanel, buttonPanel, 1, 0, 0, 0, 0.0D, 0.0D,		2, 11, new Insets(0, 0, 0, 0));	return savedConfigsPanel;    }    private JPanel createConfigPanel() {	JPanel fieldsPanel = new JPanel();	fieldsPanel.setLayout(new GridBagLayout());	JLabel nameLabel = new JLabel("Connection Name:");	GridBagUtil.add(fieldsPanel, nameLabel, 0, 0, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(0, 0, 0, 0));	JLabel ipLabel = new JLabel("IP/Server Name:");	GridBagUtil.add(fieldsPanel, ipLabel, 0, 1, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(5, 0, 0, 0));	JLabel portLabel = new JLabel("Port:");	GridBagUtil.add(fieldsPanel, portLabel, 0, 2, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(5, 0, 0, 0));	JLabel sidLabel = new JLabel("SID:");	GridBagUtil.add(fieldsPanel, sidLabel, 0, 3, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(5, 0, 0, 0));	JLabel userLabel = new JLabel("User:");	GridBagUtil.add(fieldsPanel, userLabel, 0, 4, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(5, 0, 0, 0));	JLabel passLabel = new JLabel("Password:");	GridBagUtil.add(fieldsPanel, passLabel, 0, 5, 0, 0, 0.0D, 0.0D, 0, 13,		new Insets(5, 0, 0, 0));	JLabel driverLabel = new JLabel("Driver:");	GridBagUtil.add(fieldsPanel, driverLabel, 0, 6, 0, 0, 0.0D, 0.0D, 0,		13, new Insets(5, 0, 0, 0));	GridBagUtil.add(fieldsPanel, this.nameText, 1, 0, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(0, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.ipText, 1, 1, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(5, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.portText, 1, 2, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(5, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.sidText, 1, 3, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(5, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.userText, 1, 4, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(5, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.passText, 1, 5, 0, 0, 1.0D, 0.0D, 0,		17, new Insets(5, 6, 0, 0));	GridBagUtil.add(fieldsPanel, this.driverList, 1, 6, 0, 0, 1.0D, 0.0D,		0, 17, new Insets(5, 6, 0, 0));	JPanel buttonPanel = new JPanel();	buttonPanel.setLayout(new GridBagLayout());	this.saveButton.setPreferredSize(this.connectButton.getPreferredSize());	GridBagUtil.add(buttonPanel, this.saveButton, 0, 0, 0, 0, 1.0D, 0.0D,		0, 13, new Insets(0, 0, 0, 0));	this.connectButton.setPreferredSize(this.saveButton.getPreferredSize());	GridBagUtil.add(buttonPanel, this.connectButton, 1, 0, 0, 0, 0.0D,		0.0D, 0, 13, new Insets(0, 0, 0, 0));	JPanel configPanel = new JPanel();	configPanel.setLayout(new GridBagLayout());	GridBagUtil.add(configPanel, fieldsPanel, 0, 0, 0, 0, 1.0D, 0.0D, 2,		11, new Insets(0, 0, 17, 0));	GridBagUtil.add(configPanel, buttonPanel, 0, 1, 0, 0, 0.0D, 0.0D, 0,		13, new Insets(0, 0, 0, 0));	return configPanel;    }    private void clearFields() {	this.nameText.setText("");	this.ipText.setText("");	this.portText.setText("");	this.sidText.setText("");	this.userText.setText("");	this.passText.setText("");    }    private boolean fieldsValidate() {	if ((empty(this.nameText, "Name"))		|| (empty(this.ipText, "IP/Server Name"))		|| (empty(this.portText, "Port"))		|| (empty(this.sidText, "SID"))		|| (empty(this.userText, "User"))) {	    return false;	}	return true;    }    private boolean empty(JTextField field, String id) {	if ("".equals(field.getText())) {	    JOptionPane.showMessageDialog(this.parent, id		    + " must not be empty.", "Problem with configuration", 0);	    field.requestFocus();	    return true;	}	return false;    }    public String getDriver() {	return (String) this.driverList.getSelectedItem();    }    // NEW ACTION    private class NewAction extends AbstractAction {	private static final long serialVersionUID = -1984794211343011662L;	public NewAction() {	    super("New");	}	public void actionPerformed(ActionEvent ae) {	    deleteButton.setEnabled(false);	    int i = savedConfigsList.getSelectedIndex();	    savedConfigsList.removeSelectionInterval(i, i);	    clearFields();	    nameText.requestFocus();	}    }    // DELETE ACTION    private class DeleteAction extends AbstractAction {	private static final long serialVersionUID = 2011305255498017103L;	public DeleteAction() {	    super("Delete");	}	public void actionPerformed(ActionEvent ae) {	    if (listModel.isEmpty())		return;	    if (!savedConfigsList.isSelectionEmpty()) {		int confirmed = gUtils			.requestConfirm("Are you sure you want to delete?");		if (confirmed == JOptionPane.YES_OPTION) {		    int selectedIndex = savedConfigsList.getSelectedIndex();		    listModel.remove(selectedIndex);		    configList.remove(selectedIndex);		    ConnectionConfigDao.writeConfigs(configList);		    // if the last Config was removed from the list, clear the		    // fields but dont select		    if (listModel.isEmpty())			clearFields();		    else			savedConfigsList.setSelectedIndex(selectedIndex == listModel.getSize() ? listModel.getSize() - 1: selectedIndex);		}	    }	}    }    // SAVE ACTION    private class SaveAction extends AbstractAction {	private static final long serialVersionUID = -150576847273255673L;	public SaveAction() {	    super("Save");	}	public void actionPerformed(ActionEvent ae) {	    if (fieldsValidate()) {		Properties props = new Properties();		props.setProperty("name", nameText.getText().trim());		props.setProperty("server.host", ipText.getText().trim());		props.setProperty("server.port", portText.getText().trim());		props.setProperty("server.user", userText.getText().trim());		props.setProperty("server.password",			new String(passText.getPassword()));		props.setProperty("server.sid", sidText.getText().trim());		props.setProperty(			"driver.class",			"fr.ensma.lias.mariusql.driver."				+ ((String) driverList.getSelectedItem())					.toLowerCase() + ".MariusQLDriverImpl");		ConnectionConfig config = new ConnectionConfig(props);		// does Config with same name already exist?		if (!listModel.contains(config)) {		    System.out.println(":((((((((((((((");		    // handleNew will clear the selections so we can test if the		    // save is for a new Config or to edit an old one		    if (!savedConfigsList.isSelectionEmpty()) // edit being performed			listModel.remove(savedConfigsList.getSelectedIndex()); // don't		    // retain		    // old		    // Config		    listModel.addElement(config);		    configList.add(config);		    savedConfigsList			    .setSelectedIndex(listModel.indexOf(config));		    ConnectionConfigDao.writeConfigs(configList);		} else {		    gUtils.displayError("Configuration already exists.");		}	    }	}    }    // SESSION ACTION    private class ConnectAction extends AbstractAction {	private static final long serialVersionUID = -7512306090808929846L;	public ConnectAction() {	    super("Begin session");	}	public void actionPerformed(ActionEvent ae) {	    if (fieldsValidate()) {		final Properties props = new Properties();		props.setProperty("server.host", ipText.getText().trim());		props.setProperty("server.port", portText.getText().trim());		props.setProperty("server.user", userText.getText().trim());		props.setProperty("server.password",			new String(passText.getPassword()));		props.setProperty("server.sid", sidText.getText().trim());		props.setProperty(			"driver.class",			"fr.ensma.lias.mariusql.driver."				+ ((String) driverList.getSelectedItem())					.toLowerCase() + ".MariusQLDriverImpl");		SwingWorker worker = new SwingWorker() {		    public Object construct() {			waitCursor(true);			try {			    parent.setSession(props); // long op			} catch (final SQLException sqle) {			    Runnable doError = new Runnable() {				public void run() {				    gUtils.displayError("Unable to establish a connection: "					    + sqle.getMessage());				}			    };			    SwingUtilities.invokeLater(doError);			}			return null;		    }		    public void finished() {			waitCursor(false);			if (parent.sessionEstablished()) {			    parent.setVisible(false);			    ((Main) parent.getOwner()).openMariusqlWorkBench();			}		    }		};		worker.start();	    }	}    }    protected class SortedListModel extends DefaultListModel {	private static final long serialVersionUID = 8598825462614161140L;	@SuppressWarnings({ "unchecked", "rawtypes" })	public void addElement(Object element) {	    super.addElement(element);	    Enumeration e = super.elements();	    Vector v = new Vector();	    while (e.hasMoreElements())		v.add(e.nextElement());	    Collections.sort(v);	    super.clear();	    for (int i = 0; i < v.size(); i++)		super.addElement(v.get(i));	}    }}